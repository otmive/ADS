{"cells":[{"cell_type":"markdown","source":["## Mount Google Drive for saving model weights later"],"metadata":{"id":"vc4z-pnllzri"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dM3x5UhDh7Bv","executionInfo":{"status":"ok","timestamp":1681804979411,"user_tz":-60,"elapsed":22536,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}},"outputId":"15aa644b-06c9-4662-8e0d-f2b8e3bddfe1"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["## Get dataset from github"],"metadata":{"id":"nNfCwbEQMHTL"}},{"cell_type":"code","source":["!git clone https://github.com/hpfield/ads_dataset.git # Comes resized to 224x224"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JwX537lkLILD","executionInfo":{"status":"ok","timestamp":1681805039840,"user_tz":-60,"elapsed":60437,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}},"outputId":"1ef26724-4e24-4c7c-85a3-5fb1a2deb002"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'ads_dataset'...\n","remote: Enumerating objects: 15837, done.\u001b[K\n","remote: Total 15837 (delta 0), reused 0 (delta 0), pack-reused 15837\u001b[K\n","Receiving objects: 100% (15837/15837), 721.26 MiB | 12.40 MiB/s, done.\n","Resolving deltas: 100% (3/3), done.\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"id":"gNPeFH42lSKx","executionInfo":{"status":"ok","timestamp":1681805040666,"user_tz":-60,"elapsed":844,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"outputs":[],"source":["import os\n","import shutil\n","import random\n","import pandas as pd\n","import cv2\n","import numpy as np\n","from tqdm import tqdm"]},{"cell_type":"markdown","source":["## Segment the dataset into train, test"],"metadata":{"id":"sTBplkk7L8ip"}},{"cell_type":"code","execution_count":4,"metadata":{"id":"z9p8a23mlSKy","executionInfo":{"status":"ok","timestamp":1681805040666,"user_tz":-60,"elapsed":5,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"outputs":[],"source":["\n","# Set the seed for reproducibility\n","random.seed(42)\n","\n","# Set the path to the original dataset\n","original_dataset_dir = '/content/ads_dataset/uob_image_set_resized/'\n","\n","# Set the base directory for the new dataset\n","base_dir = '/content/ads_dataset/YOLOv5_train_test_classification/'\n","\n","# Remove directories if exist\n","if os.path.exists(base_dir):\n","    shutil.rmtree(base_dir)\n","os.mkdir(base_dir)\n","# Create the directories\n","\n","# Create the train directory\n","train_dir = os.path.join(base_dir, 'train')\n","\n","if not os.path.exists(train_dir):\n","    os.mkdir(train_dir)\n","\n","# Create the test directory\n","test_dir = os.path.join(base_dir, 'test')\n","\n","if not os.path.exists(test_dir):\n","    os.mkdir(test_dir)\n","\n"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"i4i9Lu9RlSKz","executionInfo":{"status":"ok","timestamp":1681805040667,"user_tz":-60,"elapsed":5,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"outputs":[],"source":["# Create the directories for each class using the original dataset directory\n","# each folder is it's own class\n","\n","# Get the folder names from the original dataset directory\n","\n","classes = os.listdir(original_dataset_dir)\n","\n","# Remove hidden files\n","classes = [c for c in classes if not c.startswith('.')]\n","\n","# Create the directories for each class in the train and test directories\n","\n","for class_name in classes:\n","    # Create the train directory for the class\n","    train_class_dir = os.path.join(train_dir, class_name)\n","    \n","    if not os.path.exists(train_class_dir):\n","        os.mkdir(train_class_dir)\n","        \n","    # Create the test directory for the class\n","    test_class_dir = os.path.join(test_dir, class_name)\n","    \n","    if not os.path.exists(test_class_dir):\n","        os.mkdir(test_class_dir)\n","\n"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"XbCLHvD5lSKz","executionInfo":{"status":"ok","timestamp":1681805044016,"user_tz":-60,"elapsed":3353,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"outputs":[],"source":["# Copy the images into the train and test directories\n","\n","# Get the list of images for each class and store them in a dataframe\n","\n","# Create a dataframe to store the image names and their class\n","dataset = pd.DataFrame(columns=['image_name', 'class'])\n","\n","# Loop through each class\n","for class_name in classes:\n","    # Get the list of images for the class\n","    images = os.listdir(os.path.join(original_dataset_dir, class_name))\n","    for image in images:\n","        # Add the image name and class to the dataframe using pd.concat\n","        dataset = pd.concat([dataset, pd.DataFrame({'image_name': [image], 'class': [class_name]})], ignore_index=True)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"ctjIRAf_lSKz","executionInfo":{"status":"ok","timestamp":1681805046852,"user_tz":-60,"elapsed":2853,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"outputs":[],"source":["# Split the dataset into train and test\n","# Use a 80/20 split\n","# Ensure that each class has at least one example in both the train and test sets\n","\n","# Create a dataframe to store the train images\n","train = pd.DataFrame(columns=['image_name', 'class'])\n","\n","# Create a dataframe to store the test images\n","test = pd.DataFrame(columns=['image_name', 'class'])\n","\n","# Loop through each class\n","for class_name in classes:\n","    # Get the list of images for the class\n","    images = dataset[dataset['class'] == class_name]\n","    \n","    # Get the number of images for the class\n","    num_images = len(images)\n","    \n","    # Get the number of images to use for the test set\n","    num_test_images = int(num_images * 0.2)\n","    \n","    # Get the number of images to use for the train set\n","    num_train_images = num_images - num_test_images\n","    \n","    # Get the images to use for the train set\n","    train_images = images.sample(n=num_train_images, random_state=42)\n","    \n","    # Get the images to use for the test set\n","    test_images = images.drop(train_images.index)\n","\n","    if len(test_images) == 0:\n","        # If there are no images in the test set, move one image from the train set to the test set\n","        test_images = train_images.sample(n=1, random_state=42)\n","        train_images = train_images.drop(test_images.index)\n","        \n","    # Add the images to the train and test dataframes\n","    train = pd.concat([train, train_images], ignore_index=True)\n","    test = pd.concat([test, test_images], ignore_index=True)"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"fpPb2PWqlSK0","executionInfo":{"status":"ok","timestamp":1681805048977,"user_tz":-60,"elapsed":2128,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"outputs":[],"source":["# Copy the images into the train and test directories\n","\n","# Loop through each class\n","for class_name in classes:\n","    # Get the list of images for the class\n","    train_images = train[train['class'] == class_name]['image_name'].tolist()\n","    test_images = test[test['class'] == class_name]['image_name'].tolist()\n","\n","    # Check if the train_images and test_images lists are empty\n","    if len(train_images) == 0:\n","        print('No train images for class: {}'.format(class_name))\n","\n","    if len(test_images) == 0:\n","        print('No test images for class: {}'.format(class_name))\n","    \n","    # Copy the images into the train and test directories\n","    for image in train_images:\n","        src = os.path.join(original_dataset_dir, class_name, image)\n","        dst = os.path.join(train_dir, class_name, image)\n","        shutil.copyfile(src, dst)\n","        \n","    for image in test_images:\n","        src = os.path.join(original_dataset_dir, class_name, image)\n","        dst = os.path.join(test_dir, class_name, image)\n","        shutil.copyfile(src, dst)"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"GWydL8KPlSK0","executionInfo":{"status":"ok","timestamp":1681805048978,"user_tz":-60,"elapsed":6,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"outputs":[],"source":["# Check if any of the folders in the train and test directories are empty\n","\n","# Loop through each class\n","for class_name in classes:\n","    # Get the list of images for the class\n","    train_images = os.listdir(os.path.join(train_dir, class_name))\n","    test_images = os.listdir(os.path.join(test_dir, class_name))\n","    \n","    # Check if the train and test directories are empty\n","    if len(train_images) == 0:\n","        print('The train directory for the class {} is empty'.format(class_name))\n","    if len(test_images) == 0:\n","        print('The test directory for the class {} is empty'.format(class_name))"]},{"cell_type":"markdown","source":["## Setup clearml"],"metadata":{"id":"v3AxUxQI06Gm"}},{"cell_type":"code","source":["!pip install clearml -q\n","%env CLEARML_WEB_HOST=https://app.clear.ml\n","%env CLEARML_API_HOST=https://api.clear.ml\n","%env CLEARML_FILES_HOST=https://files.clear.ml\n","%env CLEARML_API_ACCESS_KEY=LBZ150QG3IKW0619OSAO\n","%env CLEARML_API_SECRET_KEY=jL17F7bprtetI3heJnSpyGVxREiw9csdJdt2AEUjTcWiAJvzbt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zyOc5iMT05Mp","executionInfo":{"status":"ok","timestamp":1681805059518,"user_tz":-60,"elapsed":10544,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}},"outputId":"79088e59-0d67-4568-fbd5-fe7b246e5e05"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/1.1 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m55.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25henv: CLEARML_WEB_HOST=https://app.clear.ml\n","env: CLEARML_API_HOST=https://api.clear.ml\n","env: CLEARML_FILES_HOST=https://files.clear.ml\n","env: CLEARML_API_ACCESS_KEY=LBZ150QG3IKW0619OSAO\n","env: CLEARML_API_SECRET_KEY=jL17F7bprtetI3heJnSpyGVxREiw9csdJdt2AEUjTcWiAJvzbt\n"]}]},{"cell_type":"markdown","source":["## Download YOLOv5"],"metadata":{"id":"Dqio_iesSwj_"}},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wbvMlHd_QwMG","outputId":"a152c21c-5da9-4b42-ba07-d8851b52db6a","executionInfo":{"status":"ok","timestamp":1681805077518,"user_tz":-60,"elapsed":18010,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["YOLOv5 🚀 v7.0-145-g94714fe Python-3.9.16 torch-2.0.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n"]},{"output_type":"stream","name":"stdout","text":["Setup complete ✅ (2 CPUs, 12.7 GB RAM, 24.2/78.2 GB disk)\n"]}],"source":["!git clone https://github.com/ultralytics/yolov5  # clone\n","%cd yolov5\n","%pip install -qr requirements.txt  # install\n","\n","import torch\n","import utils\n","display = utils.notebook_init()  # checks"]},{"cell_type":"markdown","source":["### Configure model and training run with ClearML"],"metadata":{"id":"GbnYsOgRNPZG"}},{"cell_type":"code","source":["project_name = 'snap-vision'\n","# Update the below variables to reflect the experiment details\n","num_epochs = '100' \n","image_size = '224'\n","augmentations = 'no-augmentations' # Do not use spaces\n","experiment_name = num_epochs + '-epochs,' + image_size + ',' + augmentations # Change this line to reflect the current training run"],"metadata":{"id":"GPoslg1TNNYK","executionInfo":{"status":"ok","timestamp":1681807004643,"user_tz":-60,"elapsed":610,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# insert lines of code into train.py for clearml\n","\n","# Read the existing contents of the file\n","with open(\"classify/train.py\", \"r\") as file:\n","    existing_lines = file.readlines()\n","\n","# List of lines to be inserted at the beginning\n","lines_to_insert = [\"from clearml import Task\", \"task = Task.init(project_name='\"+project_name+\"', task_name='\"+experiment_name+\"')\"]\n","\n","file.close()\n","\n","flag = lines_to_insert[0] + '\\n'\n","# if lines_to_insert[0] already exists in existing_lines, remove it and the line immediately folowing it\n","for i in range(len(existing_lines)-2):\n","    if existing_lines[i] == flag:\n","        existing_lines.pop(i)\n","        existing_lines.pop(i)\n","\n","# Insert the lines at the beginning\n","with open(\"classify/train.py\", \"w\") as file:\n","    # Write the lines to be inserted followed by a newline character\n","    for line in lines_to_insert:\n","        file.write(line + \"\\n\")\n","\n","    # Write the existing contents of the file after the inserted lines\n","    for line in existing_lines:\n","        file.write(line)\n","\n","# Close the file\n","file.close()                    \n"],"metadata":{"id":"uJ0Tbl35P4GR","executionInfo":{"status":"ok","timestamp":1681807005157,"user_tz":-60,"elapsed":5,"user":{"displayName":"Harrison Field","userId":"02417387657116967688"}}},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":["## Train model"],"metadata":{"id":"7dl_UP0VRlxA"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1NcFxRcFdJ_O","outputId":"28d08098-ef8e-4b3e-9475-7fbf6060daba"},"outputs":[{"output_type":"stream","name":"stdout","text":["ClearML Task: created new task id=9fa3295e1b2d472981004e35650bb44f\n","WARNING:tensorflow:Please fix your imports. Module tensorflow.python.training.tracking.util has been moved to tensorflow.python.checkpoint.checkpoint. The old module will be deleted in version 2.11.\n","ClearML results page: https://app.clear.ml/projects/bfdb6aab40524325966d5ec5b0e06572/experiments/9fa3295e1b2d472981004e35650bb44f/output/log\n","\u001b[34m\u001b[1mclassify/train: \u001b[0mmodel=yolov5s-cls.pt, data=/content/ads_dataset/YOLOv5_train_test_classification/, epochs=100, batch_size=64, imgsz=224, nosave=False, cache=ram, device=, workers=8, project=runs/train-cls, name=exp, exist_ok=False, pretrained=True, optimizer=Adam, lr0=0.001, decay=5e-05, label_smoothing=0.1, cutoff=None, dropout=None, verbose=False, seed=0, local_rank=-1\n","\u001b[34m\u001b[1mgithub: \u001b[0mup to date with https://github.com/ultralytics/yolov5 ✅\n","\u001b[31m\u001b[1mrequirements:\u001b[0m /content/requirements.txt not found, check failed.\n","YOLOv5 🚀 v7.0-145-g94714fe Python-3.9.16 torch-2.0.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n","\n","\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir runs/train-cls', view at http://localhost:6006/\n","\u001b[34m\u001b[1malbumentations: \u001b[0mRandomResizedCrop(p=1.0, height=224, width=224, scale=(0.08, 1.0), ratio=(0.75, 1.3333333333333333), interpolation=1), HorizontalFlip(p=0.5), ColorJitter(p=0.5, brightness=[0.6, 1.4], contrast=[0.6, 1.4], saturation=[0.6, 1.4], hue=[0, 0]), Normalize(p=1.0, mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225), max_pixel_value=255.0), ToTensorV2(always_apply=True, p=1.0, transpose_mask=False)\n","Exception ignored in: <function _after_at_fork_child_reinit_locks at 0x7f3024cff3a0>\n","Traceback (most recent call last):\n","  File \"/usr/lib/python3.9/logging/__init__.py\", line 255, in _after_at_fork_child_reinit_locks\n","    handler._at_fork_reinit()\n","  File \"/usr/lib/python3.9/logging/__init__.py\", line 894, in _at_fork_reinit\n","    self.lock._at_fork_reinit()\n","AttributeError: 'NoneType' object has no attribute '_at_fork_reinit'\n","Exception ignored in: <function _after_at_fork_child_reinit_locks at 0x7f3024cff3a0>\n","Traceback (most recent call last):\n","  File \"/usr/lib/python3.9/logging/__init__.py\", line 255, in _after_at_fork_child_reinit_locks\n","    handler._at_fork_reinit()\n","  File \"/usr/lib/python3.9/logging/__init__.py\", line 894, in _at_fork_reinit\n","    self.lock._at_fork_reinit()\n","AttributeError: 'NoneType' object has no attribute '_at_fork_reinit'\n","2023-04-18 08:37:07,848 - clearml.model - INFO - Selected model id: b12d34b048d04183bb5206ca37dd87c4\n","Model summary: 149 layers, 6093980 parameters, 6093980 gradients, 12.0 GFLOPs\n","\u001b[34m\u001b[1moptimizer:\u001b[0m Adam(lr=0.001) with parameter groups 32 weight(decay=0.0), 33 weight(decay=5e-05), 33 bias\n","Image sizes 224 train, 224 test\n","Using 1 dataloader workers\n","Logging results to \u001b[1mruns/train-cls/exp4\u001b[0m\n","Starting yolov5s-cls.pt training on /content/ads_dataset/YOLOv5_train_test_classification dataset with 1500 classes for 100 epochs...\n","\n","     Epoch   GPU_mem  train_loss   test_loss    top1_acc    top5_acc\n","     1/100     1.38G        7.28        6.87        0.01       0.042: 100% 77/77 [00:24<00:00,  3.21it/s]\n","     2/100     1.54G        6.23        5.81      0.0667       0.183: 100% 77/77 [00:23<00:00,  3.31it/s]\n","     3/100     1.54G        5.08        5.17       0.121       0.331: 100% 77/77 [00:23<00:00,  3.34it/s]\n","     4/100     1.54G        4.23        4.69        0.22       0.449: 100% 77/77 [00:22<00:00,  3.41it/s]\n","     5/100     1.54G        3.59        4.03       0.349       0.617: 100% 77/77 [00:22<00:00,  3.47it/s]\n","     6/100     1.54G        3.15        4.32       0.293       0.549: 100% 77/77 [00:21<00:00,  3.52it/s]\n","     7/100     1.54G        2.85        3.71       0.464       0.682: 100% 77/77 [00:22<00:00,  3.37it/s]\n"]}],"source":["# Train YOLOv5s Classification on fashion images\n","!python classify/train.py --model yolov5s-cls.pt --data '/content/ads_dataset/YOLOv5_train_test_classification/' --epochs {num_epochs} --img 224 --cache"]},{"cell_type":"markdown","source":["## Copy weights to Drive for later use"],"metadata":{"id":"RcloTGmhkCjU"}},{"cell_type":"code","source":["weights_source = '/content/yolov5/runs/train-cls/exp/weights/best.pt'\n","weights_dest = '/content/drive/MyDrive/Applied_Data_Science/yolov5/classification/weights/' + experiment_name + '/'\n","if not os.path.exists(weights_dest):\n","        os.makedirs(weights_dest)\n","shutil.copy(weights_source, weights_dest)"],"metadata":{"id":"1sXjPfiljEXb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["To change the colour of the label text, go to classify/predict.py line 147"],"metadata":{"id":"_c0Tyt4LPrMk"}},{"cell_type":"markdown","source":["To update the weights to reflect a new training run, change the exp in the weights argument"],"metadata":{"id":"6I-Cy352RVdL"}}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"https://github.com/ultralytics/yolov5/blob/master/classify/tutorial.ipynb","timestamp":1678802707557}],"collapsed_sections":["sTBplkk7L8ip"]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.12"}},"nbformat":4,"nbformat_minor":0}